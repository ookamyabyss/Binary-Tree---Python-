# -*- coding: utf-8 -*-
"""Binary Tree.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dbSETppPrRfp34tVjIp4gkYnFk68Z3Sw

UNEB - Universidade do Estado da Bahia

Aluno. Rafael Roberto Coutinho da Cruz

Estrutura de Dados 2. 

----------------------------------------------------------

Implementar um modelo com arvores que tenha as seguintes funcionalidades 

  - Inserir ( Regra binária - menor á esquerda e maior a direita )
  - Buscar
  - Percorrer (preOrdem, emOrdem, posOrdem)
  - Identificar o NO máximo 
  - Identificar o NO minimo
  - Retorna o número total de NÓS
  - Retorna o número total de FOLHAS
  - Identificar as FOLHAS
  - Calcular a altura de NÓ
  - Remorver um NÓ

  --------------------------------------------------------------------------------

Classe NO:
"""

class No:
     
     def __init__(self, key, dir, esq):
          self.item = key
          self.dir = dir
          self.esq = esq

"""Classe Tree:"""

class Tree:

     def __init__(self):
          self.root = No(None,None,None)
          self.root = None

     #Inserir ( Regra binária - menor á esquerda e maior a direita )
     def inserir(self, inserted):
          novo = No(inserted,None,None) # cria um novo Nó

          if self.root == None:
              self.root = novo
          
          else: # se nao for a raiz
              atual = self.root
          
              while True:
                  anterior = atual
                  
                  if inserted <= atual.item: # ir para esquerda
                      atual = atual.esq
                      
                      if atual == None:
                          anterior.esq = novo
                          return # fim da condição ir a esquerda
                    
                  else: # ir para direita
                      atual = atual.dir
                  
                      if atual == None:
                          anterior.dir = novo
                          return # fim da condição ir a direita
                

     #Buscar    
     def buscar(self, chave):
        if self.root == None:
            return None # se arvore vazia
        
        atual = self.root # começa a procurar desde raiz
        
        while atual.item != chave: # enquanto nao encontrou
        
            if chave < atual.item:
                atual = atual.esq # caminha para esquerda
            
            else:
                atual = atual.dir # caminha para direita
            
            if atual == None:
                return None # encontrou uma folha -> sai
        
        return atual  # terminou o laço while e chegou aqui é pq encontrou item

     
     #Percorrer (preOrdem, emOrdem, posOrdem)
     def inOrder(self, atual): # In Ordem
        if atual != None:
            
            self.inOrder(atual.esq)
            print(atual.item,end=" ")
            self.inOrder(atual.dir)
  
     def preOrder(self, atual): # Pre Ordem
        if atual != None:
              
            print(atual.item,end=" ")
            self.preOrder(atual.esq)
            self.preOrder(atual.dir)
       
     def posOrder(self, atual): # Pos Ordem 
        if atual != None:
            
            self.posOrder(atual.esq)
            self.posOrder(atual.dir)
            print(atual.item,end=" ")
    
     def perCorrer(self): #Percorrer (preOrdem, emOrdem, posOrdem)
        print(" Exibindo em ordem: ",end="")
        self.inOrder(self.root)
        
        print("\n Exibindo em pos-ordem: ",end="")
        self.posOrder(self.root)
        
        print("\n Exibindo em pre-ordem: ",end="")
        self.preOrder(self.root)


     #Identificar o NO máximo, Identificar o NO minimo
     def noMaximo(self): #Identificar o NO máximo.
        atual = self.root
        anterior = None
        
        while atual != None:
            
            anterior = atual
            atual = atual.dir
        
        return anterior

     def noMinimo(self): #Identificar o NO minimo.
        atual = self.root
        anterior = None
        
        while atual != None:
            
            anterior = atual
            atual = atual.esq

        return anterior

     def noMaximoMinimo(self):# Print o NO máximo, minimo 
        print(" Valor maximo: %d" %(self.noMaximo().item))
        print(" Valor minimo: %d" %(self.noMinimo().item))


     #Retorna o número total de NÓS
     def contarNos(self, atual):
        if atual == None:
            return 0

        else:
            return  1 + self.contarNos(atual.esq) + self.contarNos(atual.dir)
     
     def noTotal(self): # Print número total de NÓS
        print(" Quantidade de Nós: %d" %(self.contarNos(self.root)))


     #Retorna o número total de Folhas
     def folhas(self, atual):
        if atual == None:
            return 0;
        
        elif atual.esq == None and atual.dir == None:
            return 1;
        
        else:
            return self.folhas(atual.esq) + self.folhas(atual.dir)
      

     def totalFolhas(self): #Print número total de Folhas
        print(" Quantidade de folhas: %d"  %(self.folhas(self.root)))



     #Exibir Lista de Folhas
     def listFolhas(self, atual):
        if atual == None:
            return 0;
        
        elif atual.esq == None and atual.dir == None:
            print(" Suas Folhas são: %d"   %(atual.item))
            return 1;
        
        else:
            return self.listFolhas(atual.esq) + self.listFolhas(atual.dir)
      
     def listaFolhas(self):
        print(" Total de Folhas: %d"  %(self.listFolhas(self.root)))
     
     
     # LEVeL DO NO - 
     def levelNo(self, chave):
        count = 0
        
        if self.root == None:
            return None # se arvore vazia
        
        atual = self.root # começa a procurar desde raiz
        
        while atual.item != chave: # enquanto nao encontrou
          count += 1;
          
          if chave < atual.item:
              atual = atual.esq # caminha para esquerda
          
          else:
              atual = atual.dir # caminha para direita
          
          if atual == None:
              return None # encontrou uma folha -> sai
        
        print("Level do Nó: ", count)
        return atual  # terminou o laço while e chegou aqui é pq encontrou item

     
      # altura do nó -
     def altura(self, atual):        
        if atual == None or atual.esq == None and atual.dir == None:
            return 0
        
        else:
            if self.altura(atual.esq) > self.altura(atual.dir):
              return  1 + self.altura(atual.esq) 
            else:
              return  1 + self.altura(atual.dir) 

     
     def alturaNo(self, chave): 
        
        print("\n Altura da arvore: %d" %(self.altura(arv.buscar(x))))

"""Main:"""

#criando a arvore
arv = Tree()

print("_____Bynary Tree_____")

# var do menu 
menu = 0


while menu != 5:
     print("\n Entre com a opcao:")
     print(" --- 1: Inserir") #Inserir ( Regra binária - menor á esquerda e maior a direita )
     print(" --- 2: Buscar") #Buscar 
     print(" --- 3: Percorrer") #Percorrer (preOrdem, emOrdem, posOrdem)
     print(" --- 4: Exibir NO máximo / minimo") #Identificar o NO máximo, Identificar o NO minimo
     print(" --- 5: Total de NÓS") #Retorna o número total de NÒS
     print(" --- 6: Lista / Total de FOLHAS") #Retorna as FOLHAS e o seu TOTAL
     print(" --- 7: Calcular LVL de NÓ") #Calcular o level do Nó  
     print(" --- 8: Calcular Altura do NÓ--- ") # ---
     print(" --- 9: --- ") # ---
     print(" --- 10: --- ") # ---
     print(" --- 11: Sair do programa") #Sair do programa

     menu = int(input("-> "))
     if menu == 1:
          x = int(input(" Informe o valor -> "))
          arv.inserir(x)
     elif menu == 2:
          x = int(input(" Informe o valor -> "))
          if arv.buscar(x) != None:
               print(" Valor Encontrado")
          else:
               print(" Valor nao encontrado!")          
     elif menu == 3:
          arv.perCorrer()	 
     elif menu == 4:
          arv.noMaximoMinimo()
     elif menu == 5:
          arv.noTotal()
     elif menu == 6:
          arv.listaFolhas()
     elif menu == 7:
          x = int(input(" Informe o valor -> "))
          if arv.levelNo(x) != None:
               print(" Valor Encontrado")
          else:
               print(" Valor nao encontrado!")    
     elif menu == 8:
          x = int(input(" Informe o valor -> "))
          arv.alturaNo(x) 
     elif menu == 9:
          break
     elif menu == 10:
          break
     elif menu == 11:
          print("FIM")
          break